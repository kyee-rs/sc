// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package timescale

import (
	"context"
)

const createFile = `-- name: CreateFile :one
insert into files (id, name, mime, size, buffer, hash)
values ($1, $2, $3, $4, $5, $6)
returning created_at, id, name, mime, size, buffer, hash
`

type CreateFileParams struct {
	ID     string
	Name   string
	Mime   string
	Size   int64
	Buffer []byte
	Hash   string
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, createFile,
		arg.ID,
		arg.Name,
		arg.Mime,
		arg.Size,
		arg.Buffer,
		arg.Hash,
	)
	var i File
	err := row.Scan(
		&i.CreatedAt,
		&i.ID,
		&i.Name,
		&i.Mime,
		&i.Size,
		&i.Buffer,
		&i.Hash,
	)
	return i, err
}

const getFile = `-- name: GetFile :one
select created_at, id, name, mime, size, buffer, hash
from files
where id = $1
limit 1
`

func (q *Queries) GetFile(ctx context.Context, id string) (File, error) {
	row := q.db.QueryRowContext(ctx, getFile, id)
	var i File
	err := row.Scan(
		&i.CreatedAt,
		&i.ID,
		&i.Name,
		&i.Mime,
		&i.Size,
		&i.Buffer,
		&i.Hash,
	)
	return i, err
}

const getFileHash = `-- name: GetFileHash :one
select created_at, id, name, mime, size, buffer, hash
from files
where hash = $1
limit 1
`

func (q *Queries) GetFileHash(ctx context.Context, hash string) (File, error) {
	row := q.db.QueryRowContext(ctx, getFileHash, hash)
	var i File
	err := row.Scan(
		&i.CreatedAt,
		&i.ID,
		&i.Name,
		&i.Mime,
		&i.Size,
		&i.Buffer,
		&i.Hash,
	)
	return i, err
}

const purgeFiles = `-- name: PurgeFiles :exec
select drop_chunks('files', older_than := interval '3d')
`

func (q *Queries) PurgeFiles(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, purgeFiles)
	return err
}
